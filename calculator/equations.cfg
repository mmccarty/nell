[equations]
#  General Options
units                  =
semester               =
conversion             =
sensitivity            =
time                   =

#  Hardware Information
backend                =
mode                   =
receiver               =
beams                  =
polarization           =
bandwidth              =
windows                =
switching              =

#  Source Information
declination               =
rest_freq                 =
frame                     =
doppler                   =
redshift                  =
source_velocity           =
source_diameter_slider    =
galactic                  =
right_ascension           =
estimated_continuum       =
topocentric_freq          =

#  Data Reduction Information
r_sig_ref                 =
avg_pol                   =
diff_signal               =
no_avg_ref                =
smoothing                 =
smoothing_resolution      =
smoothing_factor          =
bw                        = 

# Constants
eta_0                     = 0.70
k                         = 1.3806503 * 1e-23
c                         = 3.0e10 
dish_radius               = 50.
tedb                      = 13
t_galactic_model          = 0
t_cmb                     = 3
t_spill                   = 3

# DB Lookups
eta_track                 = getEtaTrack(topocentric_freq, backend)
eta_dss                   = getEtaDSS(topocentric_freq)
eta_surf                  = getEtaSurf(topocentric_freq)
t_atm                     = getTatm(topocentric_freq)
t_rcvr                    = getTrcvr(topocentric_freq, backend)
tau0                      = getTau0(topocentric_freq)
k1                        = getKs(backend, bandwidth, bw, windows, beams)[0]
k2                        = getK2(backend)

# Calculations
min_topo_freq             = getMinTopoFreq(backend, bandwidth, windows, beams) if mode.lower() == "spectral line" else ""
max_elevation             = getMaxElevation(declination)
max_el_rad                = deg2rad(max_elevation)
min_elevation             = getMinElevation(declination)
min_el_rad                = deg2rad(min_elevation)
air_mass                  = 1 / math.sin(max_el_rad) if min_el_rad == max_el_rad else (deg2rad(57.29) * math.log(math.tan(max_el_rad / 2) / math.tan(min_el_rad / 2))) / (max_el_rad - min_el_rad)
source_diameter           = 0.1 * fwhm * source_diameter_slider
fwhm                      = (1.02 + 0.0135 * tedb) * 3437.7 * ( topocentric_wavelength / ( 2 * dish_radius * 100))
topocentric_wavelength    = c / (topocentric_freq * 1e6)
aperture_eff              = eta_0 * math.exp(-1 * math.pow(9.22e-6 * topocentric_freq, 2))
extended_source_eff       = aperture_eff * sourceSizeCorrection(source_diameter, fwhm)
confusion_limit           = 1e3 * (0.13 * (math.pow(fwhm, 2) / math.pow(topocentric_freq, 0.7)) if units == 'flux' else (0.41 * (math.pow(dish_radius * fwhm, 2) / (2e26 * k * math.pow(topocentric_freq, 0.7))) if units == 'tr' else 0.41 * (aperture_eff * math.pow(dish_radius * fwhm, 2) / (2e26 * k * math.pow(topocentric_freq, 0.7) * attenuation))))
est0                      = (t_rcvr + t_spill + t_atm) * math.exp(tau0 * air_mass) - (t_atm - t_cmb) 
attenuation               = (est0 * math.sqrt((eta_track * eta_surf) / eta_dss) + (t_atm - t_cmb)) / (t_rcvr + t_spill + t_atm)
est_ts                    = (estimated_continuum + t_galactic_model) / math.sqrt(eta_track * eta_surf) + est0 / math.sqrt(eta_dss)
t_sys                     = (est_ts * eta_track * eta_surf) / attenuation
bw_ref                    = bw * smoothing_factor
n_ref_smth_avg            = no_avg_ref * (bw_ref / bw)
dual_pol                  = 2 if avg_pol else 1
observing_method          = 2 if 'In-Band' in switching or 'nodding' in switching.lower() else 1
n_uncorr_samp             = dual_pol * observing_method
a                         = 1e3 * k1 * est_ts * math.sqrt(1 / (k2 * 1e6 * bw * n_uncorr_samp))
b                         = math.sqrt((r_sig_ref + n_ref_smth_avg) * (r_sig_ref + 1) / (r_sig_ref * n_ref_smth_avg))
c2                        = 1e26 * 2 * k / (math.pi * math.pow(dish_radius, 2))
t_tot                     = (math.pow(c2 * a * b / (aperture_eff * sensitivity), 2) if units == 'flux' else (math.pow(a * b / (aperture_eff * sensitivity), 2) if units == 'tr' else math.pow(a * b / (attenuation * sensitivity), 2))) if diff_signal else (math.pow(c2 * a / (aperture_eff * sensitivity), 2) if units == 'flux' else (math.pow(a / (aperture_eff * sensitivity), 2) if units == 'tr' else math.pow(a / (attenuation * sensitivity), 2)))
sigma                     = (a * b * c2 / aperture_eff * math.sqrt( 1 / time) if units == 'flux' else (a * b / aperture_eff * math.sqrt( 1 / time) if units == 'tr' else a * b / attenuation * math.sqrt( 1 / time))) if diff_signal else (a * c / aperture_eff * math.sqrt( 1 / time) if units == 'flux' else ( a / aperture_eff * math.sqrt( 1 / time) if units == 'tr' else a / attenuation * math.sqrt( 1 / time)))
tau                       = math.log(attenuation) / air_mass
t_eff                     = (t_tot / math.pow(b, 2) if diff_signal else t_tot) if conversion == 'Sensitivity to Time' else (time / math.pow(b, 2) if diff_signal else time)

[units]
resolution                = km/s
topocentric_freq          = MHz
topocentric_wavelength    = cm
rest_freq                 = MHz
min_topo_freq             = kHz
time                      = sec
sensitivity               = Jy
bandwidth                 = MHz
min_topo_frequency        = GHz
declination               = degrees
max_elevation             = degrees
min_elevation             = degrees
source_velocity           = km/s
source_diameter           = arc minutes
size                      = arc minutes
right_ascension           = degrees
estimated_continuum       = K
bw                        = kHz
bwRef                     = MHz
k                         = m^2 kg / (K s^2)
c                         = cm/s
dish_radius               = m
tedb                      = db
a                         = mK / (s^.5)

[labels]
#  General Options
units                  = Sensitivity Units
semester               = Semester
conversion             = Conversion
sensitivity            = User's Desired Sensitivity
time                   = User's Desired Total Observing Time (s)

#  Hardware Information
backend                = Backend
mode                   = Mode
receiver               = Receiver
beams                  = Beams
polarization           = Polarization
bandwidth              = Backend Total Bandwidth (MHz)
windows                = Number of Spectral Windows
switching              = Switching Mode
min_topo_freq          = Min Topocentric Channel Width (kHz)

#  Source Information
declination               = Source Declination
max_elevation             = Maximum Elevation
min_elevation             = Minimum Elevation
topocentric_freq          = Topocentric Frequency (MHz)
rest_freq                 = Rest Frequency (MHz)
frame                     = Reference Frame
doppler                   = Doppler Correction
redshift                  = Redshift (z)
source_velocity           = Source Velocity (km/s)
source_diameter           = Source Diameter (')
galactic                  = Contribution to Tsys Method
right_ascension           = Approximate Right Ascension
estimated_continuum       = User Estimated Contribution to Tsys (K)

#  Data Reduction Information
r_sig_ref                 = Ratio of Time on Signal vs Reference
avg_pol                   = Average Orthogonal Polarization
diff_signal               = Difference Signal
no_avg_ref                = Number of Reference Observations
smoothing                 = Smoothing
smoothing_resolution      = Desired Freq. or Vel. Resolution
smoothing_factor          = Reference Smoothing Factor

# Calculations
est_ts                    = Typical Effective Tsys (K)
attenuation               = Typical Atmospheric Attenuation
est0                      = Best Possible Effective Tsys (K)
air_mass                  = Typical Air Mass
fwhm                      = FWHM Beamwidth (')
topocentric_wavelength    = Topocentric Wavelength (cm)
c                         = Speed of Light (cm/s)
dish_radius               = Dish Radius (m)
tedb                      = Feed Taper (dB)
source_diameter_slider    = Source Diameter Slider Value
aperture_eff              = Aperture Efficiency
eta_0                     = Long-Wavelength Efficiency
extended_source_eff       = Extended Source Efficiency
t_atm                     = Typical Atmos. Contrib. to Tsys (K)
bw_ref                    = Bandwidth of Reference Obs (MHz)
confusion_limit           = Confusion Limit
t_cmb                     = Approximate CMB (K)
t_eff                     = Effective Integration Time (s)
t_spill                   = Approximate Spillover (K)
t_sys                     = Typical System Temperature (K)
t_rcvr                    = Receiver's Contribution to Tsys (K)
tau                       = Typical Atmospheric Opacity (Nepers)
tau0                      = Best Possible Atmos. Attenuation (Nepers)
bw                        = Bandwidth of Signal Obs (MHz)
sigma                     = Derived Sensitivity
t_tot                     = Derived Total Observing Time (s)
k1                        = Backend Sampling Efficiency (K1)
k2                        = Backend Channel Weighting (K2)
t_galactic_model          = Milky Way Contribution to Tsys (K)

[displays]
#  General Options

#  Hardware Information

#  Source Information

#  Data Reduction Information

#  Calculations
c                         = [value] [units]
dish_radius               = [value] [units] 
tedb                      = [value] [units]

