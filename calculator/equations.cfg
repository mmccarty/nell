[equations]
#  General Options
units                  =
semester               =
conversion             =
sensitivity            =
time                   =

#  Hardware Information
backend                =
mode                   =
receiver               =
beams                  =
polarization           =
bandwidth              =
windows                =
switching              =
min_topo_freq          = getMinTopoFreq(backend, bandwidth, windows, beams) if mode.lower() == "spectral line" else ""

#  Source Information
declination               =
max_elevation             = getMaxElevation(declination)
min_circumpolar_elevation = getMinCircumpolarElevation(declination)
rest_freq                 =
frame                     =
doppler                   =
redshift                  =
source_velocity           =
source_diameter           = 0.1 * fwhm * source_diameter_slider
source_diameter_slider    =
galactic                  =
right_ascension           =
estimated_continuum       =
topocentric_freq          =

#  Data Reduction Information
no_ons_per_offs           =
r_sig_ref                 =
avg_pol                   =
diff_signal               =
no_avg_ref                =
smoothing                 =
smoothing_resolution      =
smoothing_factor          =
bw                        = 

# Calculations
fwhm                      = (1.02 + 0.0135 * tedb) * 3437.7 * ( topocentric_wavelength / ( 2 * dish_radius * 100))
topocentric_wavelength    = c / (topocentric_freq * 1e6)
aperture_eff              = eta_0 * math.exp(-1 * math.pow(1.45e-5 * topocentric_freq, 2))
eta_0                     = 0.70
extended_source_eff       = aperture_eff * sourceSizeCorrection(source_diameter, fwhm)
confusion_limit           = 0.13 * (math.pow(fwhm, 2) / math.pow(topocentric_freq, 0.7)) if units == 'flux' else (0.41 * (math.pow(dish_radius * fwhm, 2) / (2e26 * k * math.pow(topocentric_freq, 0.7))) if units == 'tr' else 0.41 * (aperture_eff * math.pow(dish_radius * fwhm, 2) / (2e26 * k * math.pow(topocentric_freq, 0.7) * math.exp(tau * airmass))))
k1                        = getKs(backend, bandwidth, bw, windows, beams)[0]
k2                        = getK2(backend)
tau                       = 0
airmass                   = 1
k                         = 1.3806503 * 1e-23
c                         = 3.0e10 
dish_radius               = 50.
tedb                      = 13

[units]
resolution                = km/s
topocentric_freq          = MHz
topocentric_wavelength    = cm
rest_freq                 = MHz
min_topo_freq             = kHz
time                      = sec
sensitivity               = Jy
bandwidth                 = MHz
min_topo_frequency        = GHz
declination               = degrees
max_elevation             = degrees
min_circumpolar_elevation = degrees
source_velocity           = km/s
source_diameter           = arc minutes
size                      = arc minutes
right_ascension           = degrees
estimated_continuum       = K
bw                        = kHz
bwRef                     = MHz
k                         = m^2 kg / (K s^2)
c                         = cm/s
dish_radius               = m
tedb                      = db

[labels]
#  General Options
units                  = Sensitivity Units
semester               = Semester
conversion             =
sensitivity            = Desired Sensitivity
time                   = Observing Time

#  Hardware Information
backend                = Backend
mode                   = Mode
receiver               = Receiver
beams                  = Beams
polarization           = Polarization
bandwidth              = Bandwidth
windows                = Number of Spectral Windows
switching              = Switching Mode
min_topo_freq          = Topocentric Channel Width (kHz)

#  Source Information
declination               = Source Declination
max_elevation             = Maximum Elevation
min_circumpolar_elevation = Mininum Circumpolar Elevation
topocentric_freq          = Topocentric Frequency
rest_freq                 = Rest Frequency
frame                     = Reference Frame
doppler                   = Doppler Correction
redshift                  = Redshift
source_velocity           = Source Velocity
source_diameter           = Source Diameter
galactic                  = Source Contribution to System Temperature
right_ascension           = Approximate Right Ascension
estimated_continuum       = User Estimated Continuum Contribution

#  Data Reduction Information
no_ons_per_offs           = Number of Ons per Offs
r_sig_ref                 = Ration of time On vs Reference
avg_pol                   = Average Orthogonal Polarization
diff_signal               = Difference Signal
no_avg_ref                = Number of Reference Observations
smoothing                 = Smoothing
smoothing_resolution      = Smoothing Resolution
smoothing_factor          = Smoothing Factor

# Calculations
fwhm                      = FWHM
topocentric_wavelength    = Topocentric Wavelength
c                         = Speed of Light (c)
dish_radius               = Dish Radius
tedb                      = TeDB
source_diameter_slider    = Source Diameter Slider Value
aperture_eff              = Aperture Efficiency
eta_0                     = Eta_0 from eq 3-27
extended_source_eff       = Extended Source Efficiency

[displays]
#  General Options

#  Hardware Information

#  Source Information

#  Data Reduction Information

#  Calculations
c                         = [value] [units]
dish_radius               = [value] [units] 
tedb                      = [value] [units]

